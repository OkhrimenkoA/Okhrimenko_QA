# +, *, /,

# A * B = C
# Арифметические
"""
+ сложение
- вычитание
* умножение
** возведение в степеню
/ деление  4 / 3 даст 1.3333333
// целочисленное деление 4//3 даст 1  -4 // 3 даст -2
% деление по модулю: возвращает омтаток от деления 8 % 3 даст 2   -25.5 % 2.25 даст 1.5






"""


s1 = 'Hello'
s2 = 'World'
s3 = s1 + ' ' + s2
print(s3)
print(s1 * 3)
print(10 / 3)
print(10 / 2, type(10 / 2))
print(10 // 3, type(10 // 3))
print(10 // 3.0, type(10 // 3.0))

# операторы сравнения
"""
< меньше  5 < 3 даст false   3 < 5 даст true 
> больше
<= меньше или равно   x = 3 y = 6   x <= y дает true
>= больше или равно
== равно
!= не равно
"""
print(5>6)
print(5<=6)
# оператор присваивания
"""
Слева переменная, справа значение   Справа источник, слева приемник

= присваивание
+= сложение с последующим присваиванием x = x + 5 <==> x += 5
-= вычитание с последующим присваиванием x = x - 5 <==> x -= 5
*= умножение с последующим присваиванием x = x * 5 <==> x *= 5
/= деление с последующим присваиванием x = x / 5 <==> x /= 5
//= целочисленное деление с последующим присваиванием x = x // 5 <==> x //= 5
%= вычисление остатка от деления с послед. присваиванием x = x % 5 <==> x %= 5
**= возведение числа в степень с последующим присваиванием x = x ** 5 <==> x **= 5 
>>= сдвиг битов числа вправо x = x >> 5 <==> x >>= 5
<<= сдвиг битов числа влево x = x << 5 <==> x <<= 5
&= выполняется битовое 'И' с последующим присваиванием x = x & y <==> x &= y
|= выполняется битовое 'ИЛИ' с последующим присваиванием x = x | y <==> x |= y
^= выполняется битовое 'Исключающее ИЛИ' x = x ^ y  <==> x ^= y 
"""
# логические операторы
"""
# not унарный
# and бинарный 
# or бинарный

      A    B      A and B    A or B    not A     1 - true  0 - false
    true  true     true       true     false
    true  false    false      true     false
    false true     false      true     true
    false false    false      false    true
    
"""

# битовый операторы
"""
 & побитовое 'И'   5 & 3 дает 1                                                   бин
 | побитовое 'ИЛИ' 5 | 3 дает 7                                                   бин
 ^ побитовое 'Исключительно ИЛИ' 5 ^ 3 дает 6                                     бин 
 ~ побитовое 'НЕ' Побитовая операвция НЕ для числа x соотв. -(x + 1)  ~5 дает -6  ун

         
    
"""

# 10101101         173
#  &                &
# 10100101         165
# 10100101         165

# ~10100101        ~ 165
#  01011010          90
#       A      B      A ^ B
#     true   true     false
#     true   false    true
#     false  true     true
#     false  false    false


# операторы сдвига
"""
<< сдвиг влево  2 << 2 даст 8.  В двоичном виде 2 представляет собой 10
                                сдвиг влево на 2 бита дает 1000, что в десятичном 
                                виде означает 8
>> сдвиг вправо 11 >> 1 даст 5. В двоичном виде 11 представл., как 1011, что 
                                будучи смещенным на 1 бит вправо дает 101, а 
                                это = десятичным пяти

#  00011001 << 4
1  00110010
2  01100100
3  11001000
4 110010000

# сдвиг влево умножение, сдвиг вправо деление

"""
# 00011001 << 4
print(25 << 4)

"""
00011000
&
00001000
00001000   == 0   != 0


00000100
"""

print(25 & (1 << 2))
